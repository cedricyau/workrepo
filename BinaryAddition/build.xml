<project name="BinaryAddition" basedir="." default="run">

	<description>
		<!-- TODO -->
	</description>

	<property name="project.name" value="BinaryAddition" />
	<property name="main.build.dir" value="build/main" />
	<property name="main.src.dir" value="src/main/java" />
	<property name="test.build.dir" value="build/test" />
	<property name="test.src.dir" value="src/test/java" />
	<property name="jar.dir" value="jar" />
	<property name="lib.dir" value="lib" />
	<property name="dist.dir" value="dist" />
	<property name="doc.dir" value="doc" />
	<property name="test.reports.dir" value="reports" />
	<property name="main.class" value="BinaryAdditionTest" />

	<path id="classpath">
		<fileset dir="${lib.dir}" includes="**/*.jar" />
		<fileset dir="${jar.dir}" includes="**/*.jar" />
	</path>
		
	<target name="init">
		<!-- Create the main build directory structure used by compile -->
		<mkdir dir="${main.build.dir}" />

		<!-- Create the directory used to hold the built jar -->
		<mkdir dir="${jar.dir}" />
		
		<!-- Create the test build directory structure used by test-compile -->
		<mkdir dir="${test.build.dir}" />
	</target>

	<target name="compile" depends="init" description="compile the source">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac debug="true" srcdir="${main.src.dir}" destdir="${main.build.dir}" 
			classpathref="classpath" includeantruntime="false" />
		<copy todir="${main.build.dir}">
			<fileset dir="${main.src.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="jar" depends="init,compile" description="build the jar">
		<manifestclasspath property="jar.classpath" jarfile="${jar.dir}/${project.name}.jar">
			<classpath refid="classpath" />
		</manifestclasspath>
		<!-- Put everything in ${build} into the ${project.name}.jar file -->
		<jar destfile="${jar.dir}/${project.name}.jar" basedir="${main.build.dir}" />
		<chmod file="${basedir}/${jar.dir}/${project.name}.jar" perm="544" type="both" />
	</target>
	
	<target name="test-jar" depends="init,test-compile" description="build the test jar">
		<manifestclasspath property="jar.classpath" jarfile="${jar.dir}/${project.name}-Test.jar">
			<classpath refid="classpath" />
		</manifestclasspath>
		<!-- Put everything in ${build} into the ${project.name}.jar file -->
		<jar destfile="${jar.dir}/${project.name}-Test.jar" basedir="${test.build.dir}">
			<manifest>
				<attribute name="Main-Class" value="${main.class}"/>
				<attribute name="Class-Path" value="${jar.classpath}"/>
			</manifest>
		</jar>
		<chmod file="${basedir}/${jar.dir}/${project.name}.jar" perm="544" type="both" />
	</target>

	<target name="clean" description="clean up">
		<!-- Delete the ${build} directory trees -->
		<delete dir="${main.build.dir}" />
		<delete dir="${test.build.dir}" />
	</target>

	<target name="run" depends="clean,buildJar" />

	<target name="buildJar" depends="init,compile" description="build the jar">
		<antcall target="jar" />
		<antcall target="test-jar" />
	</target>

	<target name="dist" description="prepare artefacts for jenkins">
		<!-- delete dist folder and files -->
		<delete dir="${dist.dir}" />

		<!-- Copy src files to dist directory -->
		<copy todir="${dist.dir}">
			<fileset dir="${basedir}/${main.src.dir}" includes="*.java" />
		</copy>

		<!-- Copy resource files to dist directory -->
		<copy todir="${dist.dir}">
			<fileset dir="${basedir}" includes="*.xml" excludes="build.*,**/bin/**" />
		</copy>

		<!-- Copy jar to dist folder -->
		<copy todir="${dist.dir}">
			<fileset dir="${basedir}/${jar.dir}" excludes="*-Test.jar" />
		</copy>

		<!-- Copy doc to dist folder -->
		<copy todir="${dist.dir}">
			<fileset dir="${doc.dir}" includes="*.docx" />
		</copy>
	</target>

	<target name="test-compile" depends="compile">
		<javac srcdir="${test.src.dir}" destdir="${test.build.dir}" includeantruntime="false">
			<classpath refid="classpath" />
		</javac>
		<copy todir="${test.build.dir}">
			<fileset dir="${test.src.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="test" depends="test-compile">
		<junit printsummary="yes" haltonfailure="yes" fork="true">
			<formatter type="plain" usefile="false" />
			<formatter type="xml" />
			<batchtest>
				<fileset dir="${test.src.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
			<classpath>
				<path refid="classpath" />
				<pathelement location="${test.build.dir}" />
			</classpath>			
		</junit>
	</target>
	
</project>
